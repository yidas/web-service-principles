@startuml

participant "Client" as c
participant "Server" as s

==TCP Handshake==
c<-->s: [TCP] //Establish TCP Connection//
==SSH Handshake==
c->s: **Portocol**\nSSH protocol version, softwareversion \n(ex. SSH-2.0-OpenSSH_8.3)
s->c: **Portocol**\nSSH protocol version, softwareversion \n(ex. SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3)
c->s: **Key Exchange Init (20)** \n(SSH2_MSG_KEXINIT)
s->c: **Key Exchange Init (20)** \n(SSH2_MSG_KEXINIT)
c->s: **Elliptic Curve Diffie-Hellman Key Exchange Init (30)**
s->s: Compute shared secret
s->c: **Elliptic Curve Diffie-Hellman Key Exchange Reply (31)**\n(SSH2_MSG_KEX_ECDH_REPLY)\n**New Keys (21)**\n**Encrypted Packet**\n(Server public key)
c->c: Compute shared secret
note over c: Check if host key is in **known_hosts**
c->s: **New Keys (21)**\n(SSH2_MSG_NEWKEYS)\n**Encrypted Packet**
s->c: **Encrypted Packet**\n(SSH2_MSG_NEWKEYS: type 21)
s<->c: **Encrypted Packet**\n(type 5,7,6,50,51)
alt authentication method: publickey
c->s: **Encrypted Packet** \n(Client public key: type 50)
	note over s: Check if public key is in **authorized_keys**
	alt if server accepts key
	s->c: **Encrypted Packet** \n(Server accepts key: type 60)
	c->s: **Encrypted Packet** \n(Client sign_and_send_pubkey: type 50)
	s->c: **Encrypted Packet**\n(Authentication succeeded (publickey): type 52)
	else Else
	s->c: **Encrypted Packet**\n(type 51)
	note over c: Loop offering other publickeys by default\n or until go to password method
	end
else authentication method: password
c->s: **Encrypted Packet** \n(Client password packet: type 50)
s->c: **Encrypted Packet**\n(Authentication succeeded (password): type 52)
end
s<->c: **Encrypted Packet**\n(SSH-CONN)

==Data Exchange==
c<->s: **Encrypted Packet**

==Connection termination==
c<-->s: [TCP] //Terminate TCP Connection//

@enduml
